"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts_api_validator_1 = require("ts-api-validator");
var schema_MoneyPart_1 = require("../../schema.MoneyPart");
var constants = require("../../../constants");
var _stub_1 = require("./_stub");
// TODO : remove in the new API
function temporaryStringConversion(n) {
    return (typeof n === 'number') ? String(n) : null;
}
exports.detailedWavesBalanceSchema = new ts_api_validator_1.Schema({
    type: ts_api_validator_1.ObjectPart,
    required: true,
    content: {
        regular: {
            type: schema_MoneyPart_1.MoneyPart,
            assetId: constants.WAVES,
            parseValue: temporaryStringConversion
        },
        available: {
            type: schema_MoneyPart_1.MoneyPart,
            assetId: constants.WAVES,
            parseValue: temporaryStringConversion
        },
        effective: {
            type: schema_MoneyPart_1.MoneyPart,
            assetId: constants.WAVES,
            parseValue: temporaryStringConversion
        },
        generating: {
            type: schema_MoneyPart_1.MoneyPart,
            assetId: constants.WAVES,
            parseValue: temporaryStringConversion
        },
        leased: {
            type: schema_MoneyPart_1.MoneyPart,
            assetId: constants.WAVES,
            // TODO : remove in the new API
            path: null,
            parseValue: function (o) {
                var regular = o.regular;
                var available = o.available;
                return temporaryStringConversion(regular - available);
            }
        }
    }
});
exports.aliasesByAddressSchema = new ts_api_validator_1.Schema({
    type: ts_api_validator_1.ArrayPart,
    required: true,
    content: {
        type: ts_api_validator_1.StringPart
    }
});
exports.assetBalancesSchema = new ts_api_validator_1.Schema({
    type: ts_api_validator_1.ArrayPart,
    required: true,
    path: 'balances',
    content: {
        type: ts_api_validator_1.ObjectPart,
        content: {
            id: {
                type: ts_api_validator_1.StringPart,
                required: true,
                path: 'assetId'
            },
            name: {
                type: ts_api_validator_1.StringPart,
                required: true,
                path: 'issueTransaction.name'
            },
            precision: {
                type: ts_api_validator_1.NumberPart,
                required: true,
                path: 'issueTransaction.decimals'
            },
            amount: {
                type: schema_MoneyPart_1.MoneyPart,
                required: true,
                path: 'balance',
                assetIdPath: 'assetId',
                parseValue: temporaryStringConversion
            }
        }
    }
});
var getTxCommonFields = function (typeName, wavesFeeOnly) { return ({
    transactionType: {
        type: ts_api_validator_1.StringPart,
        defaultValue: typeName
    },
    id: {
        type: ts_api_validator_1.StringPart,
        required: true
    },
    senderPublicKey: {
        type: ts_api_validator_1.StringPart,
        required: true
    },
    sender: {
        type: ts_api_validator_1.StringPart,
        required: true
    },
    fee: wavesFeeOnly ? {
        type: schema_MoneyPart_1.MoneyPart,
        required: true,
        assetId: '',
        parseValue: temporaryStringConversion
    } : {
        type: schema_MoneyPart_1.MoneyPart,
        required: true,
        assetIdPath: 'feeAsset',
        parseValue: temporaryStringConversion
    },
    // TODO : add blockHeight for the separate TXs scheme
    timestamp: {
        type: ts_api_validator_1.DatePart,
        required: true
    },
    signature: {
        type: ts_api_validator_1.StringPart,
        required: true
    }
}); };
var getTxRecipient = function () { return ({
    type: ts_api_validator_1.StringPart,
    required: true
}); };
var getTxRecipientAddress = function () { return ({
    type: ts_api_validator_1.StringPart,
    required: true,
    parseValue: _stub_1.default('string')
}); };
var getTxAssetId = function (path) { return ({
    type: ts_api_validator_1.StringPart,
    required: true,
    path: path,
    parseValue: function (d) { return d ? d : constants.WAVES; }
}); };
var getTxAssetName = function () { return ({
    type: ts_api_validator_1.StringPart,
    required: true
}); };
var getTxAssetDescription = function () { return ({
    type: ts_api_validator_1.StringPart,
    required: true
}); };
var getTxAssetPrecision = function () { return ({
    type: ts_api_validator_1.NumberPart,
    required: true,
    path: 'decimals'
}); };
var getTxAssetTotalAmount = function (path, assetIdPath) { return ({
    type: schema_MoneyPart_1.MoneyPart,
    required: true,
    path: path,
    assetIdPath: assetIdPath,
    parseValue: temporaryStringConversion
}); };
var getTxAssetReissuable = function () { return ({
    type: ts_api_validator_1.BooleanPart,
    required: true
}); };
var getTxAmount = function (assetIdPath) { return ({
    type: schema_MoneyPart_1.MoneyPart,
    required: true,
    assetIdPath: assetIdPath,
    parseValue: temporaryStringConversion
}); };
var getTxWavesAmount = function () { return ({
    type: schema_MoneyPart_1.MoneyPart,
    required: true,
    assetId: '',
    parseValue: temporaryStringConversion
}); };
var getTxPrice = function (assetIdPath) { return ({
    type: schema_MoneyPart_1.MoneyPart,
    required: true,
    assetIdPath: assetIdPath,
    parseValue: temporaryStringConversion
}); };
var getTxWavesFee = function (path) { return ({
    type: schema_MoneyPart_1.MoneyPart,
    required: true,
    path: path,
    assetId: '',
    parseValue: temporaryStringConversion
}); };
var getTxAttachment = function () { return ({
    type: ts_api_validator_1.StringPart,
    defaultValue: ''
}); };
var getTxLeaseTransactionId = function (path) { return ({
    type: ts_api_validator_1.StringPart,
    required: true,
    path: path
}); };
var getTxAlias = function () { return ({
    type: ts_api_validator_1.StringPart,
    required: true
}); };
// TODO : move to the Matcher API section
var getTxOrder = function (path) { return ({
    type: ts_api_validator_1.ObjectPart,
    required: true,
    path: path,
    content: {
        id: {
            type: ts_api_validator_1.StringPart,
            required: true
        },
        type: {
            type: ts_api_validator_1.StringPart,
            required: true,
            path: path + ".orderType"
        },
        senderPublicKey: {
            type: ts_api_validator_1.StringPart,
            required: true
        },
        sender: {
            type: ts_api_validator_1.StringPart,
            required: true,
            parseValue: _stub_1.default('string')
        },
        matcherPublicKey: {
            type: ts_api_validator_1.StringPart,
            required: true
        },
        amountAsset: getTxAssetId('assetPair.amountAsset'),
        amount: getTxAmount('assetPair.amountAsset'),
        priceAsset: getTxAssetId('assetPair.priceAsset'),
        price: getTxAmount('assetPair.priceAsset'),
        matcherFee: getTxWavesFee()
    }
}); };
exports.issueTransactionSchema = new ts_api_validator_1.Schema({
    type: ts_api_validator_1.ObjectPart,
    required: true,
    content: __assign({}, getTxCommonFields(constants.ISSUE_TX_NAME, true), { assetId: getTxAssetId(), name: getTxAssetName(), description: getTxAssetDescription(), precision: getTxAssetPrecision(), amount: getTxAssetTotalAmount('quantity', 'assetId'), reissuable: getTxAssetReissuable() })
});
exports.transferTransactionSchema = new ts_api_validator_1.Schema({
    type: ts_api_validator_1.ObjectPart,
    required: true,
    content: __assign({}, getTxCommonFields(constants.TRANSFER_TX_NAME, false), { recipient: getTxRecipient(), recipientAddress: getTxRecipientAddress(), attachment: getTxAttachment(), assetId: getTxAssetId(), amount: getTxAmount('assetId'), feeAssetId: getTxAssetId('feeAsset') })
});
exports.reissueTransactionSchema = new ts_api_validator_1.Schema({
    type: ts_api_validator_1.ObjectPart,
    required: true,
    content: __assign({}, getTxCommonFields(constants.REISSUE_TX_NAME, true), { assetId: getTxAssetId(), amount: getTxAssetTotalAmount('quantity', 'assetId'), reissuable: getTxAssetReissuable() })
});
exports.burnTransactionSchema = new ts_api_validator_1.Schema({
    type: ts_api_validator_1.ObjectPart,
    required: true,
    content: __assign({}, getTxCommonFields(constants.BURN_TX_NAME, true), { assetId: getTxAssetId(), amount: getTxAssetTotalAmount('amount', 'assetId') })
});
exports.exchangeTransactionSchema = new ts_api_validator_1.Schema({
    type: ts_api_validator_1.ObjectPart,
    required: true,
    content: __assign({}, getTxCommonFields(constants.EXCHANGE_TX_NAME, true), { amountAsset: getTxAssetId('order1.assetPair.amountAsset'), amount: getTxAmount('order1.assetPair.amountAsset'), priceAsset: getTxAssetId('order1.assetPair.priceAsset'), price: getTxPrice('order1.assetPair.priceAsset'), buyOrder: getTxOrder('order1'), buyMatcherFee: getTxWavesFee(), sellOrder: getTxOrder('order2'), sellMatcherFee: getTxWavesFee() })
});
exports.leaseTransactionSchema = new ts_api_validator_1.Schema({
    type: ts_api_validator_1.ObjectPart,
    required: true,
    content: __assign({}, getTxCommonFields(constants.LEASE_TX_NAME, true), { recipient: getTxRecipient(), recipientAddress: getTxRecipientAddress(), amount: getTxWavesAmount() })
});
exports.cancelLeasingTransactionSchema = new ts_api_validator_1.Schema({
    type: ts_api_validator_1.ObjectPart,
    required: true,
    content: __assign({}, getTxCommonFields(constants.CANCEL_LEASING_TX_NAME, true), { leaseTransactionId: getTxLeaseTransactionId('leaseId') })
});
exports.createAliasTransactionSchema = new ts_api_validator_1.Schema({
    type: ts_api_validator_1.ObjectPart,
    required: true,
    content: __assign({}, getTxCommonFields(constants.CREATE_ALIAS_TX_NAME, true), { alias: getTxAlias() })
});
//# sourceMappingURL=addresses.x.js.map