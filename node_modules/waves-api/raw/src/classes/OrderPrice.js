"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_1 = require("../libs/bignumber");
var AssetPair_1 = require("./AssetPair");
var Money_1 = require("./Money");
var MATCHER_SCALE = new bignumber_1.default(10).pow(8);
function getMatcherDivider(precision) {
    return Money_1.getDivider(precision).mul(MATCHER_SCALE);
}
function getPair(pair, secondAsset) {
    if (AssetPair_1.default.isAssetPair(pair)) {
        return Promise.resolve(pair);
    }
    else if (pair && secondAsset) {
        // Here, both `pair` and `secondAsset` are assets
        return AssetPair_1.default.get(pair, secondAsset);
    }
    else {
        throw new Error('Invalid data passed instead AssetPair');
    }
}
var OrderPrice = /** @class */ (function () {
    function OrderPrice(coins, pair) {
        if (!AssetPair_1.default.isAssetPair(pair)) {
            throw new Error('Please use AssetPair for the `pair` argument');
        }
        this.amountAsset = pair.amountAsset;
        this.priceAsset = pair.priceAsset;
        this.matcherCoins = new bignumber_1.default(coins);
        this.divider = getMatcherDivider(pair.precisionDifference);
    }
    OrderPrice.prototype.toTokens = function () {
        return this.matcherCoins.div(this.divider).toFixed(this.priceAsset.precision);
    };
    OrderPrice.prototype.toMatcherCoins = function () {
        return this.matcherCoins.toFixed(0);
    };
    OrderPrice.prototype.toJSON = function () {
        return {
            amountAsset: this.amountAsset.id,
            priceAsset: this.priceAsset.id,
            priceCoins: this.toTokens()
        };
    };
    OrderPrice.prototype.toString = function () {
        return this.toTokens() + " " + this.amountAsset.id + "/" + this.priceAsset.id;
    };
    return OrderPrice;
}());
exports.default = {
    fromTokens: function (tokens, pair, secondAsset) {
        Money_1.checkAmount(tokens);
        return getPair(pair, secondAsset).then(function (p) {
            tokens = new bignumber_1.default(tokens).toFixed(p.priceAsset.precision);
            var divider = getMatcherDivider(p.precisionDifference);
            var coins = new bignumber_1.default(tokens).mul(divider);
            return new OrderPrice(coins, p);
        });
    },
    fromMatcherCoins: function (coins, pair, secondAsset) {
        Money_1.checkAmount(coins);
        return getPair(pair, secondAsset).then(function (p) {
            return new OrderPrice(coins, p);
        });
    },
    isOrderPrice: function (object) {
        return object instanceof OrderPrice;
    }
};
//# sourceMappingURL=OrderPrice.js.map